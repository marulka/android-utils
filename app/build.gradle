apply plugin: 'com.android.library'
apply plugin: 'maven'
apply plugin: 'signing'

android {
    compileSdkVersion 29
    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 29
        versionCode 2
        versionName '1.2.0'
        setProperty("archivesBaseName", "android-utils")
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    productFlavors {
    }
    buildToolsVersion = '29.0.3'
}

dependencies {
    implementation 'org.apache.commons:commons-lang3:3.10'
    implementation 'com.github.bumptech.glide:glide:4.11.0'
    implementation('androidx.core:core:1.3.0')
    implementation 'androidx.appcompat:appcompat:1.1.0'
    annotationProcessor 'androidx.annotation:annotation:1.1.0'
    debugImplementation 'com.github.jitpack:gradle-simple:1.1'
    testImplementation 'org.powermock:powermock-api-mockito:1.6.6'
    testImplementation 'org.powermock:powermock-module-junit4:1.6.6'
    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    androidTestImplementation 'org.robolectric:robolectric:4.3.1'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    // Fixes problem with javadoc dependencies.
    classpath = project.files(android.getBootClasspath().join(File.pathSeparator)) + configurations.compile
    // Excludes the R file from the javadoc.
    exclude '**/R.html', '**/R.*.html'
}

afterEvaluate {
    javadoc.classpath += files(android.libraryVariants.collect { variant ->
        variant.javaCompile.classpath.files
    })
}

// Java8 not fully supported in library projects yet, https://code.google.com/p/android/issues/detail?id=211386
// this is a temporary workaround to get at least lambdas compiling
gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xbootclasspath/a:" + System.properties.get("java.home") + "/lib/rt.jar"
    }
}

task deleteJar(type: Delete) {
    delete 'build/libs/android-utils-bin.jar'
}

task createJar(type: Copy) {
    from('build/intermediates/bundles/release/')
    into('build/libs/')
    include('classes.jar')
    rename('classes.jar', 'android-utils-bin.jar')
}

createJar.dependsOn(deleteJar, build)

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

// Hook them up into the artifacts collection together with the project jar itself.
artifacts {
    archives javadocJar
    archives sourcesJar
}

def isReleaseBuild() {
    return version.contains("SNAPSHOT") == false
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : "https://oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}

// OSSRH publication
afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                pom.groupId = GROUP
                pom.artifactId = POM_ARTIFACT_ID
                pom.version = VERSION_NAME

                repository(url: getReleaseRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }
                snapshotRepository(url: getSnapshotRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }

                pom.project {
                    name POM_NAME
                    packaging POM_PACKAGING
                    description POM_DESCRIPTION
                    url POM_URL

                    scm {
                        url POM_SCM_URL
                        connection POM_SCM_CONNECTION
                        developerConnection POM_SCM_DEV_CONNECTION
                    }

                    licenses {
                        license {
                            name POM_LICENCE_NAME
                            url POM_LICENCE_URL
                            distribution POM_LICENCE_DIST
                        }
                    }

                    developers {
                        developer {
                            id POM_DEVELOPER_ID
                            name POM_DEVELOPER_NAME
                        }
                    }
                }
            }
        }
    }
}

// Sign the artifact before deployment.
signing {
    required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

allprojects {

    version = VERSION_NAME
    group = GROUP

    repositories {
        jcenter()
        mavenCentral()
        maven {
            url 'https://jitpack.io'
        }
    }
}

// Assign credentials and secret ring file to sign the archive files.
gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.allTasks.any { it instanceof Sign }) {

        allprojects { ext."signing.keyId" = SIGNING_KEYID }
        allprojects { ext."signing.secretKeyRingFile" = SIGNING_SECRING }
        allprojects { ext."signing.password" = SIGNING_PASSWORD }

    }
}